Queries and its output:

1. List all the columns of the Salespeople table.
=>  describe salepeople;

2. List all customers with a rating of 100.
=>  select *from customer where rating=100;

3. Find all records in the Customer table with NULL values in the city column.
=>  select *from customer where city='null';

4. Find the largest order taken by each salesperson on each date.
=>select snum,count(*),odate,max(amt) from customer a,orders b where a.cnum=b.cnum group by snum,odate;

5. Arrange the Orders table by descending customer number.
=>  select *from orders order by cnum desc;

6. Find which salespeople currently have orders in the Orders table.
=>  select snum, onum from customer a,orders b where a.cnum=b.cnum;

7. List names of all customers matched with the salespeople serving them.
=>

8. Find the names and numbers of all salespeople who had more than one customer.
=>  select c.sname,b.snum, a.cnum from customer b, orders a,salepeople c where a.cnum=b.cnum and b.snum=c.snum having a.cnum>1;

9. Count the orders of each of the salespeople and output the results in descending order.
=>  (select a.snum,count(*) from customer a, orders b where a.cnum=b.cnum group by a.snum )order by onum desc;

10. List the Customer table if and only if one or more of the customers in the Customer table are
located in San Jose.
=>  select *from customer where city='San Jose';

11. Match salespeople to customers according to what city they lived in.
=>  select  *from customer a, salepeople b where a.snum=b.snum and b.city=a.city ;

12. Find the largest order taken by each salesperson.
=>  select snum, max(amt) from customer a, orders b where a.cnum=b.cnum group by a.snum;

13. Find customers in San Jose who have a rating above 200.
=>  select *from customer where city='San Jose' and rating>200;

14. List the names and commissions of all salespeople in London.
=>  select sname, comm from salepeople where city='London';

15. List all the orders of salesperson Motika from the Orders table.
=>  select b.onum, c.sname from customer a,orders b, salepeople c where a.cnum=b.cnum and a.snum=c.snum and c.sname='Motika';

16. Find all customers with orders on October 3.
=>  select *from orders where odate='1996-03-10';

17. Give the sums of the amounts from the Orders table, grouped by date, eliminating all those
dates where the SUM was not at least 2000.00 above the MAX amount.
=>  select odate,sum(amt) as MAX from orders group by odate having MAX>2000;

18. Select all orders that had amounts that were greater than at least one of the orders from
October 6.
=>  select *from orders a,(select odate, onum ,min(amt) as min from orders where odate='1996-06-10')b where a.amt>b.min; 


19. Write a query that uses the EXISTS operator to extract all salespeople who have customers
with a rating of 300.
=>  select *from customer a where EXISTS (select *from salepeople b where rating=300)and rating=300 and a.snum=b.snum;

20. Find all pairs of customers having the same rating.
=>  select *from customer having rating equal;

21. Find all customers whose CNUM is 1000 above the SNUM of Serres.
=>

22. Give the salespeople’s commissions as percentages instead of decimal numbers.
=>  select snum, sname, (comm*100)from salepeople group by sname; 

23. Find the largest order taken by each salesperson on each date, eliminating those MAX orders
which are less than $3000.00 in value.
=>  select *from(select snum, odate, max(amt) as max from orders a,customer b where a.cnum=b.cnum  group by odate)c where c.max>3000;

24. List the largest orders for October 3, for each salesperson.
=>  select snum,onum,odate,max(amt) from orders a, customer b where a.odate='1996-03-10' group by odate;

25. Find all customers located in cities where Serres (SNUM 1002) has customers.
=>  select * from customer a,(select city,cname ,snum as new from customer where snum=1002)b where a.city=b.city;

26. Select all customers with a rating above 200.00.
=>  select *from customer where rating>200;

27. Count the number of salespeople currently listing orders in the Orders table.
=>  select c.snum,o.onum from customer c,orders o where c.cnum=o.cnum group by c.snum;


28. Write a query that produces all customers serviced by salespeople with a commission above
12%. Output the customer’s name and the salesperson’s rate of commission.
=>  select s.comm,c.cname from customer c,salepeople s where c.snum=s.snum and s.comm>0.12; 

29. Find salespeople who have multiple customers.
=>  select snum, count(*) from customer group by snum having count(*)>1;

30. Find salespeople with customers located in their city.
=>  select s.city,c.city,c.cnum,s.snum from customer c, salepeople s where c.snum=s.snum and s.city=c.city;

31. Find all salespeople whose name starts with ‘P’ and the fourth character is ‘l’.
=>  select * from salespeople where sname like 'p__l';

32. Write a query that uses a subquery to obtain all orders for the customer named Cisneros.
Assume you do not know his customer number.
=>  select * from orders where cnum=(select cnum from customer where cname="Cisneros");

33. Find the largest orders for Serres and Rifkin.
=>  select b.snum,c.sname,max(a.amt)from orders a,customers b,salespeople c where a.cnum=b.cnum and b.snum=c.snum and (sname='Rifkin' or sname='Sarees')group by b.snum;

34. Extract the Salespeople table in the following order : SNUM, SNAME, COMMISSION, CITY.
=>  select snum,sname,comm,city from salespeople;


35. Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
=>  select * from customer where substring(cname,1,1)between'A'and 'G';

36. Select all the possible combinations of customers that you can assign.


37. Select all orders that are greater than the average for October 4.
=>  select * from orders where (select avg(odate)from orders where odate='04-10-1996');

38. Write a select command using a corelated subquery that selects the names and numbers of all
customers with ratings equal to the maximum for their city.
=>  select a.cname,a.city,a.rating from customer a(select city,max(rating)as maxrating from customer group by city)b where a.rating=b.maxrating and a.city=b.city;

39. Write a query that totals the orders for each day and places the results in descending order.
=>  select odate,sum(amt)as total from orders group by odate order by total desc;

40. Write a select command that produces the rating followed by the name of each customer in
San Jose.
=>  select rating('') cname"employee rating"from customer where city="San Jose";

41. Find all orders with amounts smaller than any amount for a customer in San Jose.
=>  select c.city, o.amt from customers c,orders o where c.cnum=o.cnum and amt>='san jose';

42. Find all orders with above average amounts for their customers.


43. Write a query that selects the highest rating in each city.
=>  select max(rating)"highest rating" from customer;

44. Write a query that calculates the amount of the salesperson’s commission on each order by a
customer with a rating above 100.00.


45. Count the customers with ratings above San Jose’s average.
=>  select count(*) from customer where rating(select avg(rating)from customer where city="San Jose"group by city);

46. Write a query that produces all pairs of salespeople with themselves as well as duplicate rows
with the order reversed.


47. Find all salespeople that are located in either Barcelona or London.


48. Find all salespeople with only one customer.
=>  select b.snum,count(*)as total from customer a,salespeople b where a.snum=b.snum group by b.snum having total=1;

49. Write a query that joins the Customer table to itself to find all pairs of customers served by a
single salesperson.
=>  select * from customer a,customerb where a.snum!=b.snum;

50. Write a query that will give you all orders for more than $1000.00
=>  select * from orders where amt>1000;

51. Write a query that lists each order number followed by the name of the customer who made
that order.
---

52. Write 2 queries that select all salespeople (by name and number) who have customers in their
cities who they do not service, one using a join and one a corelated subquery. Which solution
is more elegant?
=>  select  * from salespeople a where city in(select city from customer b where b.snum!=a.snum);

53. Write a query that selects all customers whose ratings are equal to or greater than ANY (in the
SQL sense) of Serres’?
---

54. Write 2 queries that will produce all orders taken on October 3 or October 4.
=>   select * from orders where odate='03-10-1996'0r odate='04-10-1996';

55. Write a query that produces all pairs of orders by a given customer. Name that customer and
eliminate duplicates.

56. Find only those customers whose ratings are higher than every customer in Rome

57. Write a query on the Customers table whose output will exclude all customers with a rating <=
100.00, unless they are located in Rome.
=> select * from customer where rating>100 or city="Rome";

58. Find all rows from the Customers table for which the salesperson number is 1001.
=> select * from customers where snum=1001;

59. Find the total amount in Orders for each salesperson for whom this total is greater than the
amount of the largest order in the table.
---

60. Write a query that selects all orders save those with zeroes or NULLs in the amount field.
=>  select * from orders where amt IS NOT NULL;

61. Produce all combinations of salespeople and customer names such that the former precedes
the latter alphabetically, and the latter has a rating of less than 200.
=>  select * from customer a,salespeople b where a.snum=.snum and rating>200;

62. List all Salespeople’s names and the Commission they have earned.
=>  select sname,comm from salespeople;

63. Write a query that produces the names and cities of all customers with the same rating as
Hoffman.
=>   Select cname, city from customer where rating = (select rating from customer where cname = 'Hoffman')
and cname != 'Hoffman';

64. Find all salespeople for whom there are customers that follow them in alphabetical order.
=>   Select sname from salespeople where exists ( select cname from customer where salespeople.snum = customer.snum and salespeople.sname < customer.cname);

65. Write a query that produces the names and ratings of all customers of all who have above
average orders.
=>  SELECT cname, rating FROM customers WHERE cnum IN(SELECT cnum FROM orders WHERE amt>(SELECT avg(amt)FROM orders));

66. Find the SUM of all purchases from the Orders table.
=>  select sum(amt) from orders;

67. Write a SELECT command that produces the order number, amount and date for all rows in
the order table.
=>  select odate,onum,amt from orders;

68. Count the number of nonNULL rating fields in the Customers table (including repeats).
=>  select count(rating)from customer;

69. Write a query that gives the names of both the salesperson and the customer for each order
after the order number.
=>  Select onum, sname, cname
from orders, customer, salespeople
where orders.cnum = customer.cnum and
 customer.snum = salespeople.snum;

70. List the commissions of all salespeople servicing customers in London.
=>  Select comm
from salespeople 
where snum in (select snum
 from customer
 where city = 'London');

71. Write a query using ANY or ALL that will find all salespeople who have no customers located in
their city.
=>  Select sname from salespeople 
where snum in ( select snum from customer where salespeople.city != customer.city and salespeople.snum = customer.snum);

=>  Select sname from salespeople
 where snum = any ( select snum from customer where salespeople.city != customer.city and salespeople.snum = customer.snum);

72. Write a query using the EXISTS operator that selects all salespeople with customers located in
their cities who are not assigned to them.
=> Select snum, sname from salespeople 
where exists ( select cnum from customer where salespeople.city = customer.city and salespeople.snum != customer.snum);

73. Write a query that selects all customers serviced by Peel or Motika. (Hint : The SNUM field
relates the two tables to one another.)
=> SELECT *FROM customers WHERE snum IN(SELECT snum FROM salespeople WHERE sname='Peel' OR sname='Motika');

74. Count the number of salespeople registering orders for each day. (If a salesperson has more
than one order on a given day, he or she should be counted only once.)
75. Find all orders attributed to salespeople in London.
76. Find all orders by customers not located in the same cities as their salespeople.
77. Find all salespeople who have customers with more than one current order.
78. Write a query that extracts from the Customers table every customer assigned to a
salesperson who currently has at least one other customer (besides the customer being
selected) with orders in the Orders table.
79. Write a query that selects all customers whose names begin with ‘C’.
=> select * from customer where cname like 'C%';

80. Write a query on the Customers table that will find the highest rating in each city. Put the output
in this form : for the city (city) the highest rating is : (rating).
=>   Select 'For the city (' || city || '), the highest rating is : (' || max(rating) || ')'from customer group by city;

81. Write a query that will produce the SNUM values of all salespeople with orders currently in the
Orders table (without any repeats).
82. Write a query that lists customers in descending order of rating. Output the rating field first,
followed by the customer’s names and numbers.
83. Find the average commission for salespeople in London.
=>  select avg(comm) from salespeople where city='London';

84. Find all orders credited to the same salesperson who services Hoffman (CNUM 2001).
85. Find all salespeople whose commission is in between 0.10 and 0.12 (both inclusive).
=>  select * from salespeople where comm  between 0.10 and 0.12;

86. Write a query that will give you the names and cities of all salespeople in London with a
commission above 0.10.
=>  select sname,city,comm from salespeople where city='london' and comm>0.10;


87. What will be the output from the following query?
SELECT * FROM ORDERS
where (amt < 1000 OR NOT (odate = 10/03/1996 AND cnum >
2003));

88. Write a query that selects each customer’s smallest order.
=>  Select cnum, min(amt)from orders group by cnum;

89. Write a query that selects the first customer in alphabetical order whose name begins with G.
=>  select * from customer where name like '_G'

90. Write a query that counts the number of different nonNULL city values in the Customers table.
=>  
select count(distinct city) from customer;

91. Find the average amount from the Orders table.
=>  select avg(amt)from orders;

92. What would be the output from the following query?
SELECT * FROM ORDERS
WHERE NOT (odate = 10/03/96 OR snum > 1006) AND amt >=
1500);

93. Find all customers who are not located in San Jose and whose rating is above 200.
=>  SELECT * FROM customer where city !='San jose' and rating >200;

94. Give a simpler way to write this query :
SELECT snum, sname city, comm FROM salepeople WHERE (comm > + 0.12 OR comm < 0.14);
=>select *from salepeople;

95. Evaluate the following query :
SELECT * FROM orders WHERE NOT ((odate = 10/03/96 AND snum > 1002) OR amt > 2000.00);
=>  SELECT * FROM orders a, customer b WHERE NOT ((a.odate = 10/03/96 AND b.snum > 1002) OR a.amt > 2000.00) group by b.snum;

96. Which salespersons attend to customers not in the city they have been assigned to?
=>  select s.city,s.snum,c.city,c.cnum from salepeople s,customer c where s.snum=c.snum and s.city!=c.city;


97. Which salespeople get commission greater than 0.11 are serving customers rated less than
250?
=>  select s.snum,s.comm,c.cnum,c.rating from customer c,salepeople s where s.comm>0.11 and c.rating<250;

98. Which salespeople have been assigned to the same city but get different commission
percentages?
=>select city,snum, comm from salepeople s where city='London';

99. Which salesperson has earned the most by way of commission?
=> (select s.snum,c.cnum ,max(o.amt*s.comm) from salepeople s,orders o, customer c where c.snum=s.snum and o.cnum=c.cnum group by c.snum)order by comm desc limit 1;

100.Does the customer who has placed the maximum number of orders have the maximum rating?
=> no

101.Has the customer who has spent the largest amount of money been given the highest rating?
=>  select c.cnum,o.amt,c.rating from customer c,orders o where c.cnum=o.cnum;
 NO

102.List all customers in descending order of customer rating.
=>select *from customer order by rating desc; 

103.On which days has Hoffman placed orders?
=>select o.odate ,c.cname from orders o,customer c where o.cnum=c.cnum and c.cname='Hoffman';

104.Do all salespeople have different commissions?
=>select snum,comm from salepeople;

105.Which salespeople have no orders between 10/03/1996 and 10/05/1996?
=>  select *from customer c,(select orders.* from orders where odate BETWEEN  '10/03/1996' AND '10/05/1996')b;

106.How many salespersons have succeeded in getting orders?
=>  select count(*),sum (c.snum )from orders o, customer c  where c.cnum=o.cnum;

107.How many customers have placed orders?
=>  select count(*) from orders o,(select o.onum,c.snum,count(c.cnum ) from orders o, customer c  where c.cnum=o.cnum group by c.cnum)b where b.cnum=o.cnum  ;......................

108.On which date has each salesperson booked an order of maximum value?
=>  select c.snum, o.odate, max(o.amt) from customer c,orders o where c.cnum=o.cnum group by o.odate;

109.Who is the most successful salesperson?
=>  select s.snum,c.cnum ,max(o.amt*s.comm) from salepeople s,orders o, customer c where c.snum=s.snum and o.cnum=c.cnum;


110.Who is the worst customer with respect to the company?
=>  select s.snum,c.cnum ,min(o.amt*s.comm) from salepeople s,orders o, customer c where c.snum=s.snum and o.cnum=c.cnum;

111.Are all customers not having placed orders greater than 200 totally been serviced by
salespersons Peel or Serres?
=>  select c.cnum,c.cname,o.amt,s.sname,c.rating  from salepeople s,customer c ,orders o where( c.cnum=o.cnum and s.snum=c.snum)and(s.sname="Serres"or s.sname="Peel" )having rating<200;

112.Which customers have the same rating?
=>  select cnum,rating, count(*) as c from customer group by rating having c>1 order by c desc; 

113.Find all orders greater than the average for October 4th.
=>  select * from orders o,(select  AVG( amt ) as FINAL from orders where odate='1996/03/10')b where b.FINAL<o.amt ;

114.Which customers have above average orders?
=>  select * from orders o,(select  AVG( amt ) as FINAL from orders)b where b.FINAL<o.amt;


115.List all customers with ratings above San Jose’s average.
=>  select * from customer c,(select AVG (rating) as FINAL from customer where city="San Jose")b where b.FINAL<c.rating;

116.Select the total amount in orders for each salesperson for whom the total is greater than the
amount of the largest order in the table.
117.Give names and numbers of all salespersons who have more than one customer.
118.Select all salespersons by name and number who have customers in their city whom they
don’t service.
119.Which customers’ rating should be lowered?
120.Is there a case for assigning a salesperson to Berlin?

121.Is there any evidence linking the performance of a salesperson to the commission that he or
she is being paid?
=>  Ans:select b.snum,snum(a.amt),c.comm from orders a,customer b, salepeople c where a.cnum
and b.snum=c.snum group by b.snum;

122.Does the total amount in orders by customer in Rome and London exceed the commission
paid to salespersons in London and New York by more than 5 times?
=> select sum(a.amt) as sales,(select sum(e.amt*g.comm)*5 from orders e,customer f, salespeople g
 where e.cnum=f.cnum and f.snum=g.snum and (g.city="London" or g.city="New york"))as 5_times_comm from 
orders a, customer b where a.cnum=b.cnum and (b.city ="London" or b.city="Rome")

123.Which is the date, order number, amt and city for each salesperson (by name) for the
maximum order he has obtained?
124.Which salesperson(s) should be fired?
125.What is the total income for the company?
=>  select b.snum,snum(a.amt),c.comm from orders a,customer b, salepeople c where a.cnum
and b.snum=c.snum group by b.snum;
